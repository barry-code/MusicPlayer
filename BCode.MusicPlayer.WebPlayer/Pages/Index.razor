@page "/"
@using BCode.MusicPlayer.Core
@using BCode.MusicPlayer.WebPlayer.Data

<PageTitle>My Music Player</PageTitle>

@inject IPlayer Player
@inject PlayerData PlayerData

<p>Message: @PlayerData.LastMessage</p>

<button class="btn btn-primary" @onclick="Previous">PREV</button>
<button class="btn btn-primary" @onclick="Play" hidden=@Player.IsPlaying>PLAY</button>
<button class="btn btn-primary" @onclick="Pause">PAUSE</button>
<button class="btn btn-primary" @onclick="Next">NEXT</button>


@*<SurveyPrompt Title="How is Blazor working for you?" />*@
@if (Player.CurrentSong is not null)
{
    <p>Track:@Player.CurrentSong.Name</p>
    <p>Location: @Player.CurrentSong.Path</p>
    <p>Duration: @Player.CurrentSong.Duration.ToString(@"hh\:mm\:ss")</p>
    <p>Elapsed: @Player.CurrentSongElapsedTime.ToString(@"hh\:mm\:ss")</p>
}
else
{
    <p>Track: </p>
    <p>Location: </p>
    <p>Duration: </p>
}

<table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Song</th>
                <th>Artist</th>
                <th>Album</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var song in Player.PlayList)
            {
                <tr>
                    <td>@song.Order</td>
                    <td>@song.Name</td>
                    <td>@song.ArtistName</td>
                    <td>@song.AlbumName</td>
                    <td>@song.Path</td>
                </tr>
            }
        </tbody>
    </table>

@code{
    public bool IsNotPlaying => Player?.IsPlaying ?? false;

    protected override async Task OnInitializedAsync()
    {
        if (PlayerData.IsInitialized)
            return;

        try
        {
            var testFolder = @"W:\Andrew WK\I Get Wet";

            await Player.AddSongsToPlayList(testFolder, PlayerData.CancelTokenSource.Token);

            var songs = Player.PlayList.Count;
            PlayerData.LastMessage = $"{songs} songs loaded";

            PlayerData.IsInitialized = true;
        }
        catch(Exception ex)
        {
            PlayerData.LastMessage = ex.Message;  
        }
    }

    private void Play()
    {
        try
        {
            PlayerData.LastMessage = "play pressed";
            Player?.Play();
        }
        catch(Exception ex)
        {
            PlayerData.LastMessage = ex.Message;  
        }
    }

    private void Pause()
    {
        try
        {
            PlayerData.LastMessage = "pause pressed";
            Player?.Pause();
        }
        catch(Exception ex)
        {
            PlayerData.LastMessage = ex.Message;  
        }
    }

    private void Next()
    {
        try
        {
            PlayerData.LastMessage = "next pressed";
            Player?.Next();
        }
        catch(Exception ex)
        {
            PlayerData.LastMessage = ex.Message;  
        }
    }

    private void Previous()
    {
        try
        {
            PlayerData.LastMessage = "previous pressed";
            Player?.Previous();
        }
        catch(Exception ex)
        {
            PlayerData.LastMessage = ex.Message;  
        }
    }
}

